---
import type { MarkdownHeading } from "astro";
import TableOfContentsHeading from "./TableOfContentsHeading.astro";

export interface Props {
  headings: MarkdownHeading[];
}

export type Heading = MarkdownHeading & {
  subheadings: Heading[];
};

// Based on https://kld.dev/building-table-of-contents/.
function buildToc(headings: MarkdownHeading[]) {
  const toc: Heading[] = [];
  const parentHeadings = new Map();

  headings.forEach((h) => {
    // Skip adding footnotes to the table of contents.
    if (h.slug === "footnote-label") {
      return;
    }

    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });

  return toc;
}

const toc = buildToc(Astro.props.headings);
---
<style>
  @media (min-width: 1440px) {
    ol {
      padding-left: 0;
    }

    :global(li > ol) {
      padding-left: 18px;
      list-style-type: inside;
    }
  }
</style>
<nav>
  <ol>
    {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
  </ol>
</nav>
<!-- NOTE: keep in sync with CSS -->
<script>
  function updateTableOfContentsSection(entries: IntersectionObserverEntry[]) {
    // Get entry with largest intersection ratio.
    const intersectingEntries = entries
      .filter((entry) => entry.isIntersecting)
      .sort((a, b) => b.intersectionRatio - a.intersectionRatio);

    const entry = intersectingEntries[0];
    if (!entry) return;

    Array.from(document.querySelectorAll(".toc li a.active")).forEach(link => {
      link.classList.remove("active");
    })

    const element = document.querySelector(`.toc li a[href="#${entry.target.id}"]`);
    if (element) {
      element.classList.add("active");
    }
  }

  let observer: IntersectionObserver;

  function openTableOfContents() {
    if (window.innerWidth >= 1440) {
      document.querySelector("details")!.setAttribute("open", "open");

      if (observer) return;
      observer = new IntersectionObserver(updateTableOfContentsSection, {
        root: null,
        rootMargin: "0px",
        threshold: 1.0,
      });

      Array.from(document.querySelectorAll("h2, h3, h4, h5, h6")).forEach(element => {
        observer.observe(element);
      });
    } else if (observer) {
      observer.disconnect();
      observer = null;
    }
  }

  openTableOfContents();
  window.addEventListener("resize", openTableOfContents, false);
</script>
